Index: Constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom pygame import mixer\r\nimport os\r\nimport sys\r\n\r\nmixer.init()\r\n\r\n# SIZE\r\nSIZE_SCREEN = (1920, 1080)\r\nSIZE_ZONE_STORE = 450, 450\r\n\r\n# COLOR\r\nCOLOR_SCREEN = pygame.Color('pink')\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nRED = (255, 0, 0)\r\nGREEN = (0, 255, 0)\r\nBLUE = (0, 0, 255)\r\nGRAY = (100, 100, 100)\r\n\r\n# OTHER\r\nMONEY = 0\r\nCRYSTALS = 0\r\n\r\n# PLAYER\r\nPLAYER_LEVEL = 1\r\nPLAYER_HP = 100\r\nPLAYER_SPEED_MOVE = 5  # я затестил 52 чето не то, поэтому лучше 5\r\nPLAYER_ARMOR = 50\r\nPLAYER_WEAPON = [0]  # индекс\r\nPLAYER_EQUIPMENT = [0]  # индексы(база индексов лежит в функции Equipment.get_equipment\r\n\r\n# Для инвентаря\r\nUI_HEIGHT = 200\r\nSCREEN_WIDTH_BATTLE, SCREEN_HEIGHT_BATTLE = pygame.display.set_mode((0, 0), pygame.FULLSCREEN).get_size()\r\nFIELD_WIDTH = SCREEN_WIDTH_BATTLE\r\nFIELD_HEIGHT = SCREEN_HEIGHT_BATTLE - UI_HEIGHT\r\nSLOT_SIZE = 50\r\nWIDTH, HEIGHT = 800, 600\r\nFPS = 60\r\nINVENTORY_SLOTS = 5  # Количество ячеек в инвентаре\r\n# для мобов буду свои значения\r\n\r\n# Sptites\r\nPLAYER_IMAGE = None\r\nBACKGROUND_IMAGE = None\r\nHEART_IMAGE = None\r\nARMOR_IMAGE = None\r\nCRYSTAL_IMAGE = None\r\nCOIN_IMAGE = None\r\nMOB_IMAGE = None\r\nBACKGROUND_MARKET_IMAGE = None\r\nTELEPORT_FIGHT = None\r\nTELEPORT_FIGHT_ACTIVE = None\r\n\r\ndef download_save():\r\n    #  будем использовать базу данных SQL\r\n    pass\r\n\r\n\r\n# Music/Sound\r\nWELM_SCREAM = mixer.Sound(\"Music/Wilhelm4.ogg\")\r\nFIREBALL_SPAWN_SOUND = mixer.Sound(\"Music/fireball_cast.ogg\")\r\nNEEDLE_SWISH_SOUND = mixer.Sound(\"Music/needle_cast.ogg\")\r\nCORONA_VIRUS = mixer.Sound(\"Music/corona_virus.ogg\")\r\n\r\ndef load_sprites():\r\n    global PLAYER_IMAGE, BACKGROUND_IMAGE, HEART_IMAGE, \\\r\n        ARMOR_IMAGE, CRYSTAL_IMAGE, COIN_IMAGE, MOB_IMAGE, BACKGROUND_MARKET_IMAGE, TELEPORT_FIGHT, TELEPORT_FIGHT_ACTIVE\r\n\r\n    def load_image(road, name, ):\r\n        fullname = os.path.join(road, name)\r\n        # если файл не существует, то выходим\r\n        if not os.path.isfile(fullname):\r\n            print(f\"Файл с изображением '{fullname}' не найден\")\r\n            sys.exit()\r\n        image = pygame.image.load(fullname)\r\n        image = image.convert_alpha()\r\n        return image\r\n\r\n    PLAYER_IMAGE = load_image('Sprites/Creatures', 'персонаж.png')\r\n    BACKGROUND_IMAGE = load_image('Sprites/Creatures', 'полеБоя.png')\r\n    BACKGROUND_IMAGE = pygame.transform.scale(BACKGROUND_IMAGE, (FIELD_WIDTH, FIELD_HEIGHT))\r\n    HEART_IMAGE = load_image('Sprites/Creatures', 'сердце.png')\r\n    HEART_IMAGE = pygame.transform.scale(HEART_IMAGE, (30, 30))\r\n\r\n    ARMOR_IMAGE = load_image('Sprites/Creatures', 'броня.png')\r\n    ARMOR_IMAGE = pygame.transform.scale(ARMOR_IMAGE, (30, 30))\r\n\r\n    BOAR_IMAGE = load_image('Sprites/Creatures', 'boar.png')\r\n    BOAR_IMAGE = pygame.transform.scale(BOAR_IMAGE, (70, 70))\r\n\r\n    CRYSTAL_IMAGE = load_image('Sprites/Creatures', 'кристалик.png')\r\n    CRYSTAL_IMAGE = pygame.transform.scale(CRYSTAL_IMAGE, (30, 30))\r\n    COIN_IMAGE = load_image('Sprites/Creatures', 'монетка.png')\r\n    COIN_IMAGE = pygame.transform.scale(COIN_IMAGE, (30, 30))\r\n    MOB_IMAGE = load_image('Sprites/Creatures', 'моб.png')\r\n    MOB_IMAGE = pygame.transform.scale(MOB_IMAGE, (60, 60))\r\n    BACKGROUND_MARKET_IMAGE = load_image('Sprites/Creatures', 'ЗаднийФонМагазина.png')\r\n\r\n    TELEPORT_FIGHT = load_image('Sprites/Creatures', 'тп.png')\r\n    TELEPORT_FIGHT = pygame.transform.scale(TELEPORT_FIGHT, (TELEPORT_FIGHT.get_width() * 3.5,\r\n                                                             TELEPORT_FIGHT.get_height() * 3.5))\r\n    TELEPORT_FIGHT_ACTIVE = load_image('Sprites/Creatures', 'тп актив.png')\r\n    TELEPORT_FIGHT_ACTIVE = pygame.transform.scale(TELEPORT_FIGHT_ACTIVE, (TELEPORT_FIGHT_ACTIVE.get_width() * 3.5,\r\n                                                             TELEPORT_FIGHT_ACTIVE.get_height() * 3.5))\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Constants.py b/Constants.py
--- a/Constants.py	(revision cf2291039f9b5d72887981ddba8e568b2758e7b6)
+++ b/Constants.py	(date 1738766648243)
@@ -15,7 +15,7 @@
 BLACK = (0, 0, 0)
 RED = (255, 0, 0)
 GREEN = (0, 255, 0)
-BLUE = (0, 0, 255)
+BLUE = (108, 207, 227)
 GRAY = (100, 100, 100)
 
 # OTHER
@@ -28,7 +28,7 @@
 PLAYER_SPEED_MOVE = 5  # я затестил 52 чето не то, поэтому лучше 5
 PLAYER_ARMOR = 50
 PLAYER_WEAPON = [0]  # индекс
-PLAYER_EQUIPMENT = [0]  # индексы(база индексов лежит в функции Equipment.get_equipment
+PLAYER_EQUIPMENT = [0,1]  # индексы(база индексов лежит в функции Equipment.get_equipment
 
 # Для инвентаря
 UI_HEIGHT = 200
Index: Equipment.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nfrom pygame import mixer\r\nimport math\r\nfrom Constants import FIELD_WIDTH, FIELD_HEIGHT, PLAYER_EQUIPMENT, FPS, WELM_SCREAM\r\n\r\nneedle_image = pygame.image.load(\"Sprites/Creatures/needle_image.png\").convert_alpha()\r\nneedle_image = pygame.transform.scale(needle_image, (30, 30))\r\n\r\nmixer.init()\r\n\r\nclass Needles(pygame.sprite.Sprite):\r\n    reload = FPS * 2 // 3\r\n\r\n    def __init__(self, group, pos_hero, enemies):\r\n        super().__init__(group)\r\n        self.image = needle_image  # Загруженное изображение иглы\r\n        self.rect = self.image.get_rect(center=pos_hero)\r\n        self.speed = 15\r\n        self.damage = 15\r\n        self.direction = self.get_direction(enemies)\r\n        self.hit_targets = set()  # Запоминаем, кого уже поразили\r\n\r\n    def get_direction(self, enemies):\r\n        if enemies:\r\n            target = min(enemies, key=lambda enemy: math.hypot(self.rect.x - enemy.rect.x, self.rect.y - enemy.rect.y))\r\n            dir_x = target.rect.x - self.rect.x\r\n            dir_y = target.rect.y - self.rect.y\r\n            length = math.hypot(dir_x, dir_y)\r\n            if length != 0:\r\n                return dir_x / length, dir_y / length\r\n        return 1, 0  # Если врагов нет, летит вправо\r\n\r\n    def update(self, enemies):\r\n        self.rect.x += self.direction[0] * self.speed\r\n        self.rect.y += self.direction[1] * self.speed\r\n\r\n        for enemy in enemies.copy():\r\n            if self.rect.colliderect(enemy.rect) and enemy not in self.hit_targets:\r\n                enemy.hp -= self.damage  # Наносим урон\r\n                self.hit_targets.add(enemy)  # Запоминаем, что уже нанесли урон\r\n                if enemy.hp <= 0:\r\n                    WELM_SCREAM.play()\r\n                    enemy.kill()  # Удаляем моба после смерти\r\n\r\n        # Удаляем иглу, если она выходит за границы экрана\r\n        if (self.rect.right < 0 or self.rect.left > FIELD_WIDTH or\r\n                self.rect.bottom < 0 or self.rect.top > FIELD_HEIGHT):\r\n            self.kill()\r\n\r\n\r\nclass Fireball(pygame.sprite.Sprite):\r\n    reload = FPS * 1.5\r\n\r\n    def __init__(self, group, pos_hero, enemies):\r\n        super().__init__(group)\r\n        self.image = pygame.image.load(\"Sprites/Creatures/фаербол.png\").convert_alpha()\r\n        self.image = pygame.transform.scale(self.image, (30, 30))  # Загружаем изображение\r\n        self.rect = self.image.get_rect(center=pos_hero)\r\n        self.speed = 7  # Скорость чуть меньше, чем у иглы\r\n        self.damage = 50  # Урон\r\n        self.direction = self.get_direction(enemies)\r\n\r\n    def get_direction(self, enemies):\r\n        if enemies:\r\n            target = min(enemies, key=lambda enemy: math.hypot(self.rect.x - enemy.rect.x, self.rect.y - enemy.rect.y))\r\n            dir_x = target.rect.x - self.rect.x\r\n            dir_y = target.rect.y - self.rect.y\r\n            length = math.hypot(dir_x, dir_y)\r\n            if length != 0:\r\n                return dir_x / length, dir_y / length\r\n        return 1, 0  # Если врагов нет, летит вправо\r\n\r\n    def update(self, enemies):\r\n        self.rect.x += self.direction[0] * self.speed\r\n        self.rect.y += self.direction[1] * self.speed\r\n\r\n        for enemy in enemies.copy():\r\n            if self.rect.colliderect(enemy.rect):\r\n                enemy.hp -= self.damage  # Наносим урон\r\n                if enemy.hp <= 0:\r\n                    WELM_SCREAM.play()\r\n                    enemy.kill()  # Удаляем моба после смерти\r\n                self.kill()  # Удаляем фаербол после первого попадания\r\n                return\r\n\r\n        # Удаляем фаербол, если он выходит за границы экрана\r\n        if (self.rect.right < 0 or self.rect.left > FIELD_WIDTH or\r\n                self.rect.bottom < 0 or self.rect.top > FIELD_HEIGHT):\r\n            self.kill()\r\n\r\n\r\nclass SocialDistance(pygame.sprite.Sprite):\r\n    reload = FPS\r\n\r\n    def __init__(self, group, pos_hero, radius=100, damage=10):\r\n        super().__init__(group)\r\n        self.image = pygame.Surface((radius * 2, radius * 2), pygame.SRCALPHA)\r\n        pygame.draw.circle(self.image, (207, 76, 0) + (128,), (radius, radius),\r\n                           radius)  # 128 - это уровень прозрачности\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x, self.rect.y = pos_hero[0] - radius, pos_hero[1] - radius\r\n        self.group = group\r\n        # self.pos = pos_hero\r\n        self.radius = radius\r\n        self.damage = damage\r\n        self.live = FPS * 3.5\r\n        self.live_timer = 0\r\n        self.timer_damage = FPS // 3\r\n        self.mobs_damaged = {}\r\n\r\n    def update(self, enemies):\r\n        self.live_timer += 1\r\n        if self.live_timer > self.live:\r\n            self.kill()\r\n        for enemy in enemies.copy():\r\n            x, y = self.rect.x + self.radius - enemy.rect.centerx, self.rect.y + self.radius - enemy.rect.centery\r\n            distance = math.sqrt(x * x + y * y)\r\n            if distance <= self.radius:\r\n                if enemy in self.mobs_damaged.keys():\r\n                    self.mobs_damaged[enemy] += 1\r\n                    if self.mobs_damaged[enemy] >= self.timer_damage:\r\n                        enemy.hp -= self.damage\r\n                        self.mobs_damaged[enemy] = 0\r\n                else:\r\n                    self.mobs_damaged[enemy] = 0\r\n                    enemy.hp -= self.damage\r\n            if enemy.hp <= 0:\r\n                WELM_SCREAM.play()\r\n                enemy.kill()\r\n\r\n\r\nclass Breastplate(pygame.sprite.Sprite):\r\n    def __init__(self, hero):\r\n        super().__init__()\r\n        self.image = pygame.image.load(\"Sprites/Creatures/нагрудник.png\").convert_alpha()\r\n        self.image = pygame.transform.scale(self.image, (22, 22))  # Пример размера\r\n        self.rect = self.image.get_rect()\r\n        self.hero = hero\r\n        self.rect.center = (self.hero.rect.centerx - 3, self.hero.rect.centery + 2)  # Example offset\r\n\r\n    def update(self, hero):\r\n        self.rect.center = (hero.rect.centerx - 3, hero.rect.centery + 2)  # Example offset\r\n\r\n    def upgrade_armor(self, hero):\r\n        hero.armor += 500\r\n\r\n\r\nclass Boots(pygame.sprite.Sprite):\r\n    def __init__(self, hero):\r\n        super().__init__()\r\n        self.image = pygame.image.load(\"Sprites/Creatures/ботинки.png\").convert_alpha()\r\n        self.image = pygame.transform.scale(self.image, (22, 22))\r\n        self.rect = self.image.get_rect()\r\n        self.hero = hero\r\n        self.rect.center = (self.hero.rect.centerx - 3, self.hero.rect.centery + 15)\r\n\r\n    def update(self, hero):\r\n        self.rect.center = (hero.rect.centerx - 3, hero.rect.centery + 15)\r\n\r\n    def upgrade_armor(self, hero):\r\n        hero.armor += 250\r\n\r\n\r\ndef get_weapon(index):\r\n    weapons = {0: Needles, 1: Fireball, 2: SocialDistance}\r\n    return weapons[index]\r\n\r\n\r\ndef get_equipment(index):\r\n    items = {0: Breastplate, 1: Boots}\r\n    return items[index]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Equipment.py b/Equipment.py
--- a/Equipment.py	(revision cf2291039f9b5d72887981ddba8e568b2758e7b6)
+++ b/Equipment.py	(date 1738765804644)
@@ -8,6 +8,7 @@
 
 mixer.init()
 
+
 class Needles(pygame.sprite.Sprite):
     reload = FPS * 2 // 3
 
Index: Market.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nimport Constants\r\nfrom Constants import UI_HEIGHT, PLAYER_SPEED_MOVE, PLAYER_HP, PLAYER_ARMOR, RED, WHITE, SLOT_SIZE, INVENTORY_SLOTS, \\\r\n    FIELD_HEIGHT, FIELD_WIDTH, FPS, GRAY, SIZE_ZONE_STORE, SIZE_SCREEN\r\n\r\n\r\nclass Shop:\r\n    def __init__(self, hero):\r\n        self.hero = hero\r\n        self.armor = PLAYER_ARMOR\r\n        self.hp = PLAYER_HP\r\n        self.all_sprites = pygame.sprite.Group()\r\n        self.all_sprites.add(self.hero)\r\n        self.fight = Fight((SIZE_SCREEN[0] // 2 - Constants.TELEPORT_FIGHT.get_width() // 2, 0), self.hero,\r\n                           self.all_sprites)\r\n        self.store = Store((0, SIZE_SCREEN[1] // 4), self.hero, self.all_sprites)\r\n        self.upgrade = Upgrade((SIZE_SCREEN[0] - SIZE_ZONE_STORE[0], SIZE_SCREEN[1] // 4), self.hero, self.all_sprites)\r\n\r\n        self.flag_fight = False\r\n        for item in self.hero.inventory:\r\n            self.all_sprites.add(item)\r\n            item.upgrade_armor(self)\r\n\r\n    def update_all(self, event=None, tick=None):\r\n        self.hero.update(1)\r\n        self.store.update(event)\r\n        self.upgrade.update(event)\r\n        self.fight.update(event)\r\n        if self.fight.flag_set_fight:\r\n            self.flag_fight = True\r\n            self.fight.flag_set_fight = False\r\n\r\n    def draw_all(self, screen):\r\n        screen.blit(Constants.BACKGROUND_MARKET_IMAGE, (0, 0))\r\n        self.store.draw(screen)\r\n        self.upgrade.draw(screen)\r\n        self.fight.draw(screen)\r\n        self.all_sprites.draw(screen)\r\n\r\n    def _change_scene(self, scene: int):\r\n        pass\r\n\r\n\r\nclass Store:\r\n    player_in_zone = False\r\n    open_window = False\r\n\r\n    def __init__(self, pos, hero, group_player):\r\n        self.pos = pos\r\n        self.group = group_player\r\n        self.zone = pygame.sprite.Sprite()\r\n        self.zone.image = pygame.Surface(SIZE_ZONE_STORE)\r\n        self.zone.image.fill((0, 0, 0))\r\n        self.zone.rect = self.zone.image.get_rect()\r\n        self.zone.rect.x, self.zone.rect.y = pos\r\n        self.font = pygame.font.Font(None, 36)\r\n        self.mes = self.font.render('E', True, WHITE)\r\n        self.hero = hero\r\n\r\n    def update(self, event=None):\r\n        if event:\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_e and not self.open_window and self.player_in_zone:\r\n                    self.open_window = True\r\n                    # self.hero.block_move()\r\n                elif event.key == pygame.K_e and self.open_window:\r\n                    self.open_window = False\r\n                    # self.hero.block_move()\r\n        else:\r\n            if pygame.sprite.spritecollideany(self.zone, self.group):\r\n                self.player_in_zone = True\r\n\r\n            else:\r\n                self.player_in_zone = False\r\n        # TODO: дальше делать магазин :)\r\n\r\n    def draw(self, screen):\r\n        pygame.draw.rect(screen, pygame.Color('red'), (*self.pos, *SIZE_ZONE_STORE), width=1)\r\n\r\n        if self.player_in_zone:\r\n            screen.blit(self.mes, (self.pos[0] + SIZE_ZONE_STORE[0] // 2, self.pos[1] + SIZE_ZONE_STORE[1] // 2))\r\n        if self.open_window:\r\n            pygame.draw.rect(screen, pygame.Color('blue'), (50, 50, SIZE_SCREEN[0] - 100, SIZE_SCREEN[1] - 100),\r\n                             width=0)\r\n\r\n\r\nclass Upgrade:\r\n    player_in_zone = False\r\n    open_window = False\r\n\r\n    def __init__(self, pos, hero, group_player):\r\n        self.pos = pos\r\n        self.group = group_player\r\n        self.zone = pygame.sprite.Sprite()\r\n        self.zone.image = pygame.Surface(SIZE_ZONE_STORE)\r\n        self.zone.image.fill((0, 0, 0))\r\n        self.zone.rect = self.zone.image.get_rect()\r\n        self.zone.rect.x, self.zone.rect.y = pos\r\n        self.font = pygame.font.Font(None, 36)\r\n        self.mes = self.font.render('E', True, WHITE)\r\n        self.hero = hero\r\n\r\n    def update(self, event=None):\r\n        if event:\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_e and not self.open_window and self.player_in_zone:\r\n                    self.open_window = True\r\n                    # self.hero.block_move()\r\n                elif event.key == pygame.K_e and self.open_window:\r\n                    self.open_window = False\r\n                    # self.hero.block_move()\r\n        else:\r\n            if pygame.sprite.spritecollideany(self.zone, self.group):\r\n                self.player_in_zone = True\r\n\r\n            else:\r\n                self.player_in_zone = False\r\n        # TODO: дальше делать магазин :)\r\n\r\n    def draw(self, screen):\r\n        pygame.draw.rect(screen, pygame.Color('red'), (*self.pos, *SIZE_ZONE_STORE), width=1)\r\n\r\n        if self.player_in_zone:\r\n            screen.blit(self.mes, (self.pos[0] + SIZE_ZONE_STORE[0] // 2, self.pos[1] + SIZE_ZONE_STORE[1] // 2))\r\n        if self.open_window:\r\n            pygame.draw.rect(screen, pygame.Color('blue'), (50, 50, SIZE_SCREEN[0] - 100, SIZE_SCREEN[1] - 100),\r\n                             width=0)\r\n\r\n\r\nclass Fight:\r\n    player_in_zone = False\r\n\r\n    def __init__(self, pos, hero, group_player):\r\n        self.pos = pos\r\n        self.group = group_player\r\n        self.activ = Constants.TELEPORT_FIGHT_ACTIVE\r\n        self.dis_activ = Constants.TELEPORT_FIGHT\r\n        self.zone = pygame.sprite.Sprite()\r\n        self.zone.image = self.dis_activ\r\n        self.zone.rect = self.zone.image.get_rect()\r\n        self.zone.rect.x, self.zone.rect.y = self.pos\r\n        self.font = pygame.font.Font(None, 36)\r\n        self.mes = self.font.render('E', True, WHITE)\r\n        self.flag_set_fight = False\r\n\r\n    def update(self, event=None):\r\n        if event:\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_e and self.player_in_zone:\r\n                    self.flag_set_fight = True\r\n        else:\r\n            if pygame.sprite.spritecollideany(self.zone, self.group):\r\n                self.player_in_zone = True\r\n                self.zone.image = self.activ\r\n\r\n            else:\r\n                self.player_in_zone = False\r\n                self.zone.image = self.dis_activ\r\n\r\n    def draw(self, screen):\r\n        screen.blit(self.zone.image, self.zone.rect)\r\n\r\n        if self.player_in_zone:\r\n            screen.blit(self.mes, (\r\n                self.pos[0] + self.zone.image.get_width() // 2 - 8,\r\n                self.pos[1] + self.zone.image.get_height() // 2 - 8))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Market.py b/Market.py
--- a/Market.py	(revision cf2291039f9b5d72887981ddba8e568b2758e7b6)
+++ b/Market.py	(date 1738766892664)
@@ -2,7 +2,7 @@
 
 import Constants
 from Constants import UI_HEIGHT, PLAYER_SPEED_MOVE, PLAYER_HP, PLAYER_ARMOR, RED, WHITE, SLOT_SIZE, INVENTORY_SLOTS, \
-    FIELD_HEIGHT, FIELD_WIDTH, FPS, GRAY, SIZE_ZONE_STORE, SIZE_SCREEN
+    FIELD_HEIGHT, FIELD_WIDTH, FPS, GRAY, SIZE_ZONE_STORE, SIZE_SCREEN, BLUE
 
 
 class Shop:
@@ -84,6 +84,9 @@
             pygame.draw.rect(screen, pygame.Color('blue'), (50, 50, SIZE_SCREEN[0] - 100, SIZE_SCREEN[1] - 100),
                              width=0)
 
+    def draw_window(self, screen):
+        pass
+
 
 class Upgrade:
     player_in_zone = False
@@ -141,7 +144,7 @@
         self.zone.rect = self.zone.image.get_rect()
         self.zone.rect.x, self.zone.rect.y = self.pos
         self.font = pygame.font.Font(None, 36)
-        self.mes = self.font.render('E', True, WHITE)
+        self.mes = self.font.render('E', True, BLUE)
         self.flag_set_fight = False
 
     def update(self, event=None):
